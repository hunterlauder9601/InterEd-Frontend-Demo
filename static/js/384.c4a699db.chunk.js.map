{"version":3,"file":"static/js/384.c4a699db.chunk.js","mappings":"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","sources":["CustomCheckbox.jsx","CourseCatalog.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { HiCheck } from \"react-icons/hi2\";\r\n\r\n\r\nexport function CustomCheckbox({ url, lessonName, status, toggleLessonStatus, id, active }) {\r\n  const [isChecked, setIsChecked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsChecked(!!status)\r\n  }, [status])\r\n\r\n  const handleCheckboxChange = () => {\r\n    toggleLessonStatus(id);\r\n    setIsChecked(!isChecked);\r\n  };\r\n\r\n  return (\r\n    <div className='flex items-center'>\r\n      <label\r\n        className=\"relative flex cursor-pointer items-center rounded-full py-3 mr-4\"\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isChecked}\r\n          onChange={handleCheckboxChange}\r\n          className=\"before:content[''] peer relative h-6 w-6 cursor-pointer appearance-none rounded-md border border-gray-300 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-green-500 checked:bg-green-500 checked:before:bg-green-500 hover:before:opacity-10\"\r\n        />\r\n        <div\r\n          className={`pointer-events-none absolute top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 text-white transition-opacity ${\r\n            isChecked ? 'opacity-100' : 'opacity-0'\r\n          }`}\r\n        >\r\n          {isChecked && <HiCheck className=\"h-5 w-5\" />}\r\n        </div>\r\n      </label>\r\n      {active ? \r\n      <Link\r\n      to={url}\r\n      className={\r\n        isChecked\r\n          ? 'bg-gray-400 hover:bg-gray-500 w-full duration-200 text-white px-4 py-2 rounded-3xl text-left'\r\n          : 'bg-blue-400 hover:bg-blue-500 w-full duration-200 text-white px-4 py-2 rounded-3xl text-left'\r\n      }\r\n      >\r\n        {lessonName}\r\n      </Link>\r\n      :\r\n      <button className={`${isChecked ? 'bg-gray-400 hover:bg-gray-500' : 'bg-blue-400 hover:bg-blue-500'} w-full duration-200 text-white px-4 py-2 rounded-3xl text-left cursor-not-allowed`}>{lessonName}</button>\r\n      }\r\n      \r\n    </div>\r\n  );\r\n}","import { useState, useEffect } from 'react';\r\nimport { db, auth } from './firebase';\r\nimport { doc, setDoc, getDoc, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Link } from 'react-router-dom';\r\nimport { FaLongArrowAltLeft, FaStar } from \"react-icons/fa\";\r\nimport { CustomCheckbox } from './CustomCheckbox';\r\n\r\nconst courseImages = {\r\n    'OS': require('./images/os_icon1.png'),\r\n    'Python': require('./images/python_icon(2).png'),\r\n    // Add more courses and image paths as needed\r\n  };\r\n\r\nconst CourseCatalog = ({ courseName, courseNameFull, lessons }) => {\r\n    const navigate = useNavigate();\r\n    const [isFavorited, setIsFavorited] = useState(false);\r\n    const [userID, setUserID] = useState('');\r\n    const [lessonStatus, setLessonStatus] = useState({});\r\n    const [lessonStatusDoc, setLessonStatusDoc] = useState(null);\r\n\r\n    // Dynamically import the course-specific image based on courseName\r\n    const courseImage = courseImages[courseName] || null;\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (user) => {\r\n            if (!user) {\r\n            navigate('/login');\r\n            } else {\r\n                // Set the user ID\r\n                setUserID(user.uid);\r\n\r\n                // Reference to the user's document\r\n                const userDocRef = doc(db, 'users', user.uid);\r\n\r\n                const userDocSnapshot = await getDoc(userDocRef);\r\n                console.log('get userDocSnapshot')\r\n\r\n                if (userDocSnapshot.exists()) {\r\n                    const favoriteCourses = userDocSnapshot.data().favoriteCourses;\r\n                    if (favoriteCourses && favoriteCourses.includes(courseName)) {\r\n                        setIsFavorited(true);\r\n                    }\r\n                } else {\r\n                    // If the user's document doesn't exist, create it with an empty favoriteCourses array\r\n                    await setDoc(userDocRef, { favoriteCourses: [] });\r\n                }\r\n            }\r\n        });\r\n\r\n    return () => unsubscribe();\r\n    }, [navigate, courseName, lessons]);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (user) => {\r\n            if (!user) {\r\n            navigate('/login');\r\n            } else {\r\n                // Set the user ID\r\n                setUserID(user.uid);\r\n\r\n                // Reference to the lesson status document\r\n                const lessonStatusDocRef = doc(db, 'users', user.uid, 'courseProgress', courseName);\r\n\r\n                // Check if lessonStatusDoc is already in memory\r\n                if (!lessonStatusDoc) {\r\n                    // Get the lesson status document\r\n                    const lessonStatusDocSnapshot = await getDoc(lessonStatusDocRef);\r\n                    setLessonStatusDoc(lessonStatusDocSnapshot);\r\n                    console.log('get lessonStatusDocSnapshot')\r\n\r\n                    if (lessonStatusDocSnapshot.exists()) {\r\n                        // Lesson status document exists, set the lessonStatus state\r\n                        setLessonStatus(lessonStatusDocSnapshot.data());\r\n                    } else {\r\n                        // When initializing the Firestore document, create objects based on the number of lessons\r\n                        const initialLessonStatus = {};\r\n                        lessons.forEach((lesson, index) => {\r\n                            initialLessonStatus[String(index + 1)] = false;\r\n                        });\r\n\r\n                        await setDoc(lessonStatusDocRef, initialLessonStatus);\r\n                        setLessonStatus(initialLessonStatus);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n    return () => unsubscribe();\r\n    }, [navigate, courseName, lessons, lessonStatusDoc]);\r\n\r\n\r\n    const toggleFavorite = async () => {\r\n        // Reference to the user's document\r\n        const userDocRef = doc(db, 'users', userID);\r\n    \r\n        // Check if the course is already favorited\r\n        if (isFavorited) {\r\n          // Remove the course from the user's favoriteCourses array\r\n          await updateDoc(userDocRef, {\r\n            favoriteCourses: arrayRemove(courseName)\r\n          });\r\n        } else {\r\n          // Add the course to the user's favoriteCourses array\r\n          await updateDoc(userDocRef, {\r\n            favoriteCourses: arrayUnion(courseName)\r\n          });\r\n        }\r\n    \r\n        // Toggle the favorite state\r\n        setIsFavorited(!isFavorited);\r\n      };\r\n\r\n    const toggleLessonStatus = async (lessonNumber) => {\r\n    // // Update the Firestore document with the new lesson status\r\n    const lessonStatusDocRef = doc(db, 'users', userID, 'courseProgress', courseName);\r\n\r\n    // // Get the current lesson status\r\n    // const lessonStatusDocSnapshot = await getDoc(lessonStatusDocRef);\r\n\r\n    // if (lessonStatusDocSnapshot.exists()) {\r\n        // const lessonStatusData = lessonStatusDocSnapshot.data();\r\n\r\n        const lessonStatusData = lessonStatus;\r\n\r\n        // Toggle the lesson status\r\n        lessonStatusData[lessonNumber] = !lessonStatusData[lessonNumber];\r\n\r\n        // Update the Firestore document with the updated lesson status\r\n        await setDoc(lessonStatusDocRef, lessonStatusData);\r\n\r\n        // Update the lessonStatus state\r\n        setLessonStatus(lessonStatusData);\r\n\r\n        // Update the lessonStatusDoc state in memory\r\n        setLessonStatusDoc({ ...lessonStatusDoc, [lessonNumber]: lessonStatusData[lessonNumber] });\r\n    // }\r\n    };\r\n\r\n  return (\r\n    <div className='w-auto min-h-[calc(100vh-65px)] max-h-fit bg-gray-100 text-black flex items-center overflow-hidden'>\r\n      <div className={'w-full h-full max-w-6xl px-4 py-8 mx-auto flex flex-col justify-center items-center'}>\r\n        <h1 className='text-4xl font-bold tracking-wider mb-4'>{courseNameFull}</h1>\r\n        <Link to=\"/courses\" className='bg-blue-400 text-white px-4 py-2 mb-6 rounded-3xl flex items-center hover:bg-blue-500 duration-200 group'>\r\n          <FaLongArrowAltLeft size={16} className='mr-2 group-hover:rotate-[360deg] duration-200' />Go Back\r\n        </Link>\r\n        <hr className='w-full border my-4 border-gray-300'/>\r\n        <div className='grid grid-cols-1 md:grid-cols-2 h-fit w-fit '>\r\n          <div className='h-64 w-full p-4 flex justify-center items-center md:justify-start'>\r\n            <div className='h-full aspect-square rounded-lg shadow-2xl overflow-hidden bg-contain bg-center bg-no-repeat\r\n            group hover:scale-110 cursor-pointer duration-300 ease-in'\r\n              style={{ backgroundImage: `url(${courseImage})` }} onClick={() => toggleFavorite()}>\r\n              <div className='w-full min-h-full max-h-max group-hover:backdrop-blur-sm group-hover:backdrop-brightness-50\r\n            duration-300 ease-in flex flex-col justify-center'>\r\n                <div className='mx-2 opacity-0 group-hover:opacity-100 duration-300 ease-in\r\n                  text-white'>\r\n                  <p className='text-lg font-bold'>\r\n                    Like the course? Add it to <span className='text-yellow-400'>Bookmarks</span> for quick access!\r\n                  </p>\r\n                  <div\r\n                    className={`${\r\n                      isFavorited ? 'text-yellow-400' : 'text-gray-400'\r\n                    } duration-200 w-full flex items-center justify-center mt-[5%]`}\r\n                  >\r\n                    <FaStar size={30} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='h-full w-auto p-4 '>\r\n            <h2 className='text-2xl font-bold mb-4 text-center md:text-left'>{courseName} Lessons</h2>\r\n            <div className='flex flex-col gap-4'>\r\n              {lessons.map((lesson, index) => (\r\n                <CustomCheckbox\r\n                  key={index}\r\n                  url={lesson.url}\r\n                  lessonName={lesson.name}\r\n                  status={lessonStatus[index + 1]}\r\n                  userID={userID}\r\n                  toggleLessonStatus={() => toggleLessonStatus(index + 1)}\r\n                  id={String(index + 1)}\r\n                  active={lesson.active}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr className='w-full border my-4 border-gray-300 md:block hidden'/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CourseCatalog as default}"],"names":["CustomCheckbox","url","lessonName","status","toggleLessonStatus","id","active","useState","isChecked","setIsChecked","useEffect","className","type","checked","onChange","to","courseImages","require","CourseCatalog","courseName","courseNameFull","lessons","navigate","useNavigate","isFavorited","setIsFavorited","userID","setUserID","lessonStatus","setLessonStatus","lessonStatusDoc","setLessonStatusDoc","courseImage","unsubscribe","auth","user","uid","userDocRef","doc","db","getDoc","userDocSnapshot","console","log","exists","favoriteCourses","data","includes","setDoc","lessonStatusDocRef","lessonStatusDocSnapshot","initialLessonStatus","forEach","lesson","index","String","toggleFavorite","updateDoc","arrayRemove","arrayUnion","lessonNumber","lessonStatusData","size","style","backgroundImage","onClick","map","name"],"sourceRoot":""}