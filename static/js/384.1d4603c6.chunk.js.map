{"version":3,"file":"static/js/384.1d4603c6.chunk.js","mappings":"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","sources":["CustomCheckbox.jsx","CourseCatalog.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { HiCheck } from \"react-icons/hi2\";\r\n\r\n\r\nexport function CustomCheckbox({ url, lessonName, status, toggleLessonStatus, id, active }) {\r\n  const [isChecked, setIsChecked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsChecked(!!status)\r\n  }, [status])\r\n\r\n  const handleCheckboxChange = () => {\r\n    toggleLessonStatus(id);\r\n    setIsChecked(!isChecked);\r\n  };\r\n\r\n  return (\r\n    <div className='flex items-center'>\r\n      <label\r\n        className=\"relative flex cursor-pointer items-center rounded-full py-3 mr-4\"\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isChecked}\r\n          onChange={handleCheckboxChange}\r\n          className=\"before:content[''] peer relative h-6 w-6 cursor-pointer appearance-none rounded-md border border-gray-300 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity checked:border-green-500 checked:bg-green-500 checked:before:bg-green-500 hover:before:opacity-10\"\r\n        />\r\n        <div\r\n          className={`pointer-events-none absolute top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 text-white transition-opacity ${\r\n            isChecked ? 'opacity-100' : 'opacity-0'\r\n          }`}\r\n        >\r\n          {isChecked && <HiCheck className=\"h-5 w-5\" />}\r\n        </div>\r\n      </label>\r\n      {active ? \r\n      <Link\r\n      to={url}\r\n      className={\r\n        isChecked\r\n          ? 'bg-gray-400 hover:bg-gray-500 w-full duration-200 text-white px-4 py-2 rounded-3xl text-left'\r\n          : 'bg-blue-400 hover:bg-blue-500 w-full duration-200 text-white px-4 py-2 rounded-3xl text-left'\r\n      }\r\n      >\r\n        {lessonName}\r\n      </Link>\r\n      :\r\n      <button className={`${isChecked ? 'bg-gray-400 hover:bg-gray-500' : 'bg-blue-400 hover:bg-blue-500'} w-full duration-200 text-white px-4 py-2 rounded-3xl text-left cursor-not-allowed`}>{lessonName}</button>\r\n      }\r\n      \r\n    </div>\r\n  );\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { db, auth } from './firebase';\r\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Link } from 'react-router-dom';\r\nimport { FaLongArrowAltLeft, FaStar } from \"react-icons/fa\";\r\nimport { CustomCheckbox } from './CustomCheckbox';\r\n\r\nimport docker from './images/docker-icon.svg'\r\nimport os from './images/os_icon1.png'\r\nimport python from './images/python.svg'\r\nimport linux from './images/linux-tux.svg'\r\nimport rust from './images/rust.svg'\r\nimport Kubernetes from './images/kubernetes.svg'\r\nimport ml from './images/Machine-Learning_icon.png'\r\nimport go from './images/go.svg'\r\n//already should be downloaded from courses page so no point in lazy loading\r\n  \r\nconst courseImages = {\r\n    'OS': os,\r\n    'Python': python,\r\n    'Linux': linux,\r\n    'Docker': docker,\r\n    'Rust': rust,\r\n    'Kubernetes': Kubernetes,\r\n    'ML': ml,\r\n    'Go': go\r\n    // Add more courses and image paths as needed\r\n  };\r\n\r\nconst CourseCatalog = ({ courseName, courseNameFull, lessons }) => {\r\n    const navigate = useNavigate();\r\n    const courses = useRef();\r\n    const [isFavorited, setIsFavorited] = useState(false);\r\n    const [userID, setUserID] = useState('');\r\n    const [lessonStatus, setLessonStatus] = useState({});\r\n\r\n    const courseImage = courseImages[courseName] || null;\r\n\r\n    useEffect(() => {\r\n      const unsubscribe = auth.onAuthStateChanged(async (user) => {\r\n          if (!user) {\r\n          navigate('/login');\r\n          } else {\r\n              // Set the user ID\r\n              setUserID(user.uid);\r\n\r\n              const localStorageFavs = localStorage.getItem('favoriteCourses');\r\n\r\n              if (localStorageFavs) {\r\n                const favoriteCourses = JSON.parse(localStorageFavs);\r\n                if (favoriteCourses && favoriteCourses[courseName]) {\r\n                  setIsFavorited(true);\r\n                }\r\n                courses.current = favoriteCourses;\r\n                console.log('cached favorite courses read')\r\n              } else {\r\n                // Reference to the user's document\r\n                const userDocRef = doc(db, 'users', user.uid, 'courses', 'bookmarks');\r\n\r\n                const userDocSnapshot = await getDoc(userDocRef);\r\n                console.log('favorite courses doc read')\r\n\r\n                if (userDocSnapshot.exists()) {\r\n                    const favoriteCourses = userDocSnapshot.data();\r\n                    if (favoriteCourses && favoriteCourses[courseName]) {\r\n                        setIsFavorited(true);\r\n                    }\r\n                    localStorage.setItem('favoriteCourses', JSON.stringify(favoriteCourses));\r\n                    courses.current = favoriteCourses;\r\n                } else {\r\n                  //should never happen unless the user has never visited courses page or google firestore messed up\r\n                  navigate('/courses');\r\n                }\r\n              }\r\n          }\r\n      });\r\n\r\n    return () => unsubscribe();\r\n    }, [navigate, courseName, lessons]);\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(async (user) => {\r\n            if (!user) {\r\n            navigate('/login');\r\n            } else {\r\n                // Set the user ID\r\n                setUserID(user.uid);\r\n                // Check if lessonStatus is already in localStorage\r\n                const localStorageLessonStatus = localStorage.getItem(`${courseName}`);\r\n                if (localStorageLessonStatus) {\r\n                  setLessonStatus(JSON.parse(localStorageLessonStatus));\r\n                  console.log('cached lessons read')\r\n                } else {\r\n                  // Reference to the lesson status document\r\n                  const lessonStatusDocRef = doc(db, 'users', user.uid, 'courseProgress', courseName);\r\n                  // Read the lesson status document\r\n                  const lessonStatusDocSnapshot = await getDoc(lessonStatusDocRef);\r\n                  console.log('lessons doc read')\r\n\r\n                  if (lessonStatusDocSnapshot.exists()) {\r\n                    const lessonStatusData = lessonStatusDocSnapshot.data();\r\n                    setLessonStatus(lessonStatusData);\r\n                    // Store the lesson status in localStorage for caching\r\n                    localStorage.setItem(`${courseName}`, JSON.stringify(lessonStatusData));\r\n                  } else {\r\n                    const initialLessonStatus = {};\r\n                    lessons.forEach((lesson, index) => {\r\n                      initialLessonStatus[String(index + 1)] = false;\r\n                    });\r\n        \r\n                    await setDoc(lessonStatusDocRef, initialLessonStatus);\r\n                    setLessonStatus(initialLessonStatus);\r\n                    // Store the lesson status in localStorage for caching\r\n                    localStorage.setItem(`${courseName}`, JSON.stringify(initialLessonStatus));\r\n                  }\r\n                }\r\n            }\r\n        });\r\n\r\n    return () => unsubscribe();\r\n    }, [navigate, courseName, lessons]);\r\n\r\n\r\n    const toggleFavorite = async () => {\r\n      // Reference to the user's document\r\n      const userDocRef = doc(db, 'users', userID, 'courses', 'bookmarks');\r\n\r\n      courses.current[courseName] = !courses.current[courseName];\r\n\r\n      await setDoc(userDocRef, courses.current);\r\n  \r\n      // Toggle the favorite state\r\n      setIsFavorited(!isFavorited);\r\n\r\n      // Update local storage\r\n      localStorage.setItem('favoriteCourses', JSON.stringify(courses.current));\r\n\r\n    };\r\n\r\n    const toggleLessonStatus = async (lessonNumber) => {\r\n      // Update the Firestore document with the new lesson status\r\n      const lessonStatusDocRef = doc(db, 'users', userID, 'courseProgress', courseName);\r\n\r\n      const lessonStatusData = lessonStatus;\r\n\r\n      // Toggle the lesson status\r\n      lessonStatusData[lessonNumber] = !lessonStatusData[lessonNumber];\r\n\r\n      // Update the Firestore document with the updated lesson status\r\n      await setDoc(lessonStatusDocRef, lessonStatusData);\r\n\r\n      // Update the lessonStatus state\r\n      setLessonStatus(lessonStatusData);\r\n\r\n      // Update the cached lesson status in localStorage\r\n      localStorage.setItem(`${courseName}`, JSON.stringify(lessonStatusData));\r\n    };\r\n\r\n  return (\r\n    <div className='w-auto min-h-[calc(100vh-65px)] max-h-fit bg-gray-100 text-black flex items-center overflow-hidden'>\r\n      <div className={'w-full h-full max-w-6xl px-4 py-8 mx-auto flex flex-col justify-center items-center'}>\r\n        <h1 className='text-4xl font-bold tracking-wider mb-4'>{courseNameFull}</h1>\r\n        <Link to=\"/courses\" className='bg-blue-400 text-white px-4 py-2 mb-6 rounded-3xl flex items-center hover:bg-blue-500 duration-200 group'>\r\n          <FaLongArrowAltLeft size={16} className='mr-2 group-hover:rotate-[360deg] duration-200' />Go Back\r\n        </Link>\r\n        <hr className='w-full border my-4 border-gray-300'/>\r\n        <div className='grid grid-cols-1 md:grid-cols-2 h-full w-full gap-[1%]'>\r\n          <div className='h-64 w-full p-4 flex justify-center items-center md:justify-end'>\r\n            <div className='h-full aspect-square rounded-lg shadow-2xl overflow-hidden bg-contain bg-center bg-no-repeat\r\n            group hover:scale-110 cursor-pointer duration-300 ease-in' id='img'\r\n            style={{ backgroundImage: `url(${courseImage})` }} onClick={() => toggleFavorite()}>\r\n              <div className='w-full min-h-full max-h-max group-hover:backdrop-blur-sm group-hover:backdrop-brightness-50\r\n            duration-300 ease-in flex flex-col justify-center'>\r\n                <div className='mx-2 opacity-0 group-hover:opacity-100 duration-300 ease-in\r\n                  text-white'>\r\n                  <p className='text-lg font-bold'>\r\n                    Like the course? Add it to <span className='text-yellow-400'>Bookmarks</span> for quick access!\r\n                  </p>\r\n                  <div\r\n                    className={`${\r\n                      isFavorited ? 'text-yellow-400' : 'text-gray-400'\r\n                    } duration-200 w-full flex items-center justify-center mt-[5%]`}\r\n                  >\r\n                    <FaStar size={30} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='h-full w-full flex justify-center items-center md:justify-start p-4 '>\r\n            <div className='h-full w-fit'>\r\n              <h2 className='text-2xl font-bold mb-4 text-center md:text-left'>{courseName} Lessons</h2>\r\n              <div className='flex flex-col gap-4 w-full'>\r\n                {lessons.map((lesson, index) => (\r\n                  <CustomCheckbox\r\n                    key={index}\r\n                    url={lesson.url}\r\n                    lessonName={lesson.name}\r\n                    status={lessonStatus[index + 1]}\r\n                    userID={userID}\r\n                    toggleLessonStatus={() => toggleLessonStatus(index + 1)}\r\n                    id={String(index + 1)}\r\n                    active={lesson.active}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <hr className='w-full border my-4 border-gray-300 md:block hidden'/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { CourseCatalog as default}"],"names":["CustomCheckbox","url","lessonName","status","toggleLessonStatus","id","active","useState","isChecked","setIsChecked","useEffect","className","type","checked","onChange","to","courseImages","os","python","linux","docker","rust","Kubernetes","ml","go","CourseCatalog","courseName","courseNameFull","lessons","navigate","useNavigate","courses","useRef","isFavorited","setIsFavorited","userID","setUserID","lessonStatus","setLessonStatus","courseImage","unsubscribe","auth","user","uid","localStorageFavs","localStorage","getItem","favoriteCourses","JSON","parse","current","console","log","userDocRef","doc","db","getDoc","userDocSnapshot","exists","data","setItem","stringify","localStorageLessonStatus","lessonStatusDocRef","lessonStatusDocSnapshot","lessonStatusData","initialLessonStatus","forEach","lesson","index","String","setDoc","toggleFavorite","lessonNumber","size","style","backgroundImage","onClick","map","name"],"sourceRoot":""}